// Code generated by goctl. DO NOT EDIT!
// Source: sys.proto

//go:generate mockgen -destination ./sys_mock.go -package sysclient -source $GOFILE

package sysclient

import (
	"context"

	"house-repair-api/rpc/sys/sys"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	LoginResp         = sys.LoginResp
	InfoReq           = sys.InfoReq
	UserAddReq        = sys.UserAddReq
	UserListResp      = sys.UserListResp
	ReSetPasswordReq  = sys.ReSetPasswordReq
	ReSetPasswordResp = sys.ReSetPasswordResp
	LoginReq          = sys.LoginReq
	UserStatusReq     = sys.UserStatusReq
	UserStatusResp    = sys.UserStatusResp
	RoleLisItem       = sys.RoleLisItem
	UserListReq       = sys.UserListReq
	UserListData      = sys.UserListData
	UserUpdateReq     = sys.UserUpdateReq
	RoleListReq       = sys.RoleListReq
	Response          = sys.Response
	UserDeleteReq     = sys.UserDeleteReq
	RoleAddReq        = sys.RoleAddReq
	RoleUpdateReq     = sys.RoleUpdateReq
	RoleDeleteReq     = sys.RoleDeleteReq
	RoleListResp      = sys.RoleListResp

	Sys interface {
		// 用户相关
		Login(ctx context.Context, in *LoginReq) (*LoginResp, error)
		// 角色管理
		RoleList(ctx context.Context, in *RoleListReq) (*RoleListResp, error)
		RoleAdd(ctx context.Context, in *RoleAddReq) (*Response, error)
		RoleUpdate(ctx context.Context, in *RoleUpdateReq) (*Response, error)
		RoleDelete(ctx context.Context, in *RoleDeleteReq) (*Response, error)
		// 用户管理
		UserList(ctx context.Context, in *UserListReq) (*UserListResp, error)
		UserAdd(ctx context.Context, in *UserAddReq) (*Response, error)
		UserUpdate(ctx context.Context, in *UserUpdateReq) (*Response, error)
		UserDelete(ctx context.Context, in *UserDeleteReq) (*Response, error)
	}

	defaultSys struct {
		cli zrpc.Client
	}
)

func NewSys(cli zrpc.Client) Sys {
	return &defaultSys{
		cli: cli,
	}
}

// 用户相关
func (m *defaultSys) Login(ctx context.Context, in *LoginReq) (*LoginResp, error) {
	client := sys.NewSysClient(m.cli.Conn())
	return client.Login(ctx, in)
}

// 角色管理
func (m *defaultSys) RoleList(ctx context.Context, in *RoleListReq) (*RoleListResp, error) {
	client := sys.NewSysClient(m.cli.Conn())
	return client.RoleList(ctx, in)
}

func (m *defaultSys) RoleAdd(ctx context.Context, in *RoleAddReq) (*Response, error) {
	client := sys.NewSysClient(m.cli.Conn())
	return client.RoleAdd(ctx, in)
}

func (m *defaultSys) RoleUpdate(ctx context.Context, in *RoleUpdateReq) (*Response, error) {
	client := sys.NewSysClient(m.cli.Conn())
	return client.RoleUpdate(ctx, in)
}

func (m *defaultSys) RoleDelete(ctx context.Context, in *RoleDeleteReq) (*Response, error) {
	client := sys.NewSysClient(m.cli.Conn())
	return client.RoleDelete(ctx, in)
}

// 用户管理
func (m *defaultSys) UserList(ctx context.Context, in *UserListReq) (*UserListResp, error) {
	client := sys.NewSysClient(m.cli.Conn())
	return client.UserList(ctx, in)
}

func (m *defaultSys) UserAdd(ctx context.Context, in *UserAddReq) (*Response, error) {
	client := sys.NewSysClient(m.cli.Conn())
	return client.UserAdd(ctx, in)
}

func (m *defaultSys) UserUpdate(ctx context.Context, in *UserUpdateReq) (*Response, error) {
	client := sys.NewSysClient(m.cli.Conn())
	return client.UserUpdate(ctx, in)
}

func (m *defaultSys) UserDelete(ctx context.Context, in *UserDeleteReq) (*Response, error) {
	client := sys.NewSysClient(m.cli.Conn())
	return client.UserDelete(ctx, in)
}
