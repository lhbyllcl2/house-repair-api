// Code generated by goctl. DO NOT EDIT!
// Source: repair.proto

//go:generate mockgen -destination ./repair_mock.go -package repairclient -source $GOFILE

package repairclient

import (
	"context"

	"house-repair-api/rpc/repair/repair"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	Response      = repair.Response
	PartAddReq    = repair.PartAddReq
	PartListReq   = repair.PartListReq
	PartLisItem   = repair.PartLisItem
	PartListResp  = repair.PartListResp
	PartUpdateReq = repair.PartUpdateReq
	PartDeleteReq = repair.PartDeleteReq

	Repair interface {
		// part管理
		PartList(ctx context.Context, in *PartListReq) (*PartListResp, error)
		PartAdd(ctx context.Context, in *PartAddReq) (*Response, error)
		PartUpdate(ctx context.Context, in *PartUpdateReq) (*Response, error)
		PartDelete(ctx context.Context, in *PartDeleteReq) (*Response, error)
	}

	defaultRepair struct {
		cli zrpc.Client
	}
)

func NewRepair(cli zrpc.Client) Repair {
	return &defaultRepair{
		cli: cli,
	}
}

// part管理
func (m *defaultRepair) PartList(ctx context.Context, in *PartListReq) (*PartListResp, error) {
	client := repair.NewRepairClient(m.cli.Conn())
	return client.PartList(ctx, in)
}

func (m *defaultRepair) PartAdd(ctx context.Context, in *PartAddReq) (*Response, error) {
	client := repair.NewRepairClient(m.cli.Conn())
	return client.PartAdd(ctx, in)
}

func (m *defaultRepair) PartUpdate(ctx context.Context, in *PartUpdateReq) (*Response, error) {
	client := repair.NewRepairClient(m.cli.Conn())
	return client.PartUpdate(ctx, in)
}

func (m *defaultRepair) PartDelete(ctx context.Context, in *PartDeleteReq) (*Response, error) {
	client := repair.NewRepairClient(m.cli.Conn())
	return client.PartDelete(ctx, in)
}
